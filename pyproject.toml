# This pyproject.toml is setup so it can be used with or without poetry and also
# supports editable installs (PEP 660) without breaking IDE and linter inspection.

# DEVELOPER INSTALL INSTRUCTIONS (assuming current directory is at the top of the project) :
# Poetry:
#   poetry install --extras dev
# PIP:
#   pip install -e .[dev]

################################################################################
#                START OF BOILERPLATE CONFIGURATIONS                #
################################################################################


[build-system]
requires = ["poetry-core>=1.6.1"]
build-backend = "poetry.core.masonry.api"


[tool.black]
target-version = ['py312']
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
    | \/docs
    | ^/setup.py
)

'''


[tool.ruff]
target-version = "py312"  # minimum supported version
line-length = 88  # same as Black.
extend-exclude = [
    "docs",
]
output-format = "concise"

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "DTZ", # flake8-datetimez
    "E",  # pycodestyle error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE", # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
#    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "FURB",  # refurb
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specific
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "D107",  # missing __init__ docstring, we do that in the class docstring.
    "D203",  # one blank line before class docstring, no thanks!
    "D212",  # multi line summary first line, we want a one line summary.
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN102",  # missing cls annotation, we only annotate cls when we return it.
    "UP038", # use `int | float` in `isinstance` *slower
    "UP040", # type for TypeAlias - mypy doesnt support yet

    #TEMP IGNORES
    "B024", # abstract base class
    "TRY002", # own exceptions

    # docstring rules
    
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`

    "D205", # blank line between summary and description
]

extend-safe-fixes = [
    "ANN201", "ANN202", "ANN204",
    "EM101", "EM102",
    "E711", # Comparison to `None` should be `cond is None`
    "TCH001", "TCH002", "TCH003", "TCH004",
    "C408", "C419",
    "D200", "D205", "D415",
    "PT003", "PT006", "PT018",
    "RET504",
    "RSE102",
    "SIM105", "SIM108",
    "UP006", "UP007", "UP008", 
    "W291", "W293",
    "TRY201",
    "ISC001",
]

# marcels special rules -- temporary
#select = [
#    "A",  # flake8-builtins
#    "ANN",  # flake8-annotations
##    "ARG",  # flake8-unused-arguments
#    "B",  # flake8-bugbear
##    "BLE",  # flake8-blind-except
#    "C4",  # flake8-comprehensions
#    "D",  # pydocstyle
#    "DTZ", # flake8-datetimez
#    "E",  # pycodestyle error
#    "EXE", # flake8-executable
##    "EM",  # flake8-errmsg
##    "ERA",  # eradicate
#    "F",  # Pyflakes
#    "FA", # flake8-future-annotations
##    "FBT",  # flake8-boolean-trap
##    "FIX",  # flake8-fixme
#    "FLY", # flynt
#    "I",  # isort
##    "ICN",  # flake8-import-conventions
#    "ISC",  # flake8-implicit-str-concat
#    "PERF", # perflint
##    "PGH",  # pygrep-hooks
#    "PIE", # flake8-pie
#    "PL", # pylint
##    "PT",  # flake8-pytest-style
#    "Q",  # flake8-quotes
#    "RET",  # flake8-return
#    "RSE",  # flake8-raise
#    "RUF",  # ruff specific
#    "SIM",  # flake8-simplify
##    "T10",  # flake8-debugger
##    "T20",  # flake8-print
#    "TCH",  # flake8-type-checking
##    "TRY",  # tryceratops
#    "UP",  # python upgrade
#    "W",  # pycodestyle warning
#    "YTT",  # flake8-2020
#    #    "N", # pep8 naming -- dear lord, leave this off
#
#    # may eventually use but for now these are not helpful
#    #    "FURB", # refurb
#    #    "ARG",  # unused arguments
#    #    "PT",  # Pytest style
#    #    "TD",  #TODOs
#    #    "FBT",  # boolean trap
#]
#ignore = [
#    #    "PT003",  # pytest fixture scope implied
#    #    "PT004",  # pytest fixture setup doesn't return anything
#    "RUF100",  # blanket noqa
#    "ANN101",  # missing-type-self
#    "ANN102",  # cls 
#    "E501",   # line too long -- black will take care of this for us
#    "E721", # type-comparison WTF? 
#    "B028", # No explicit `stacklevel` keyword argument found
#    "SIM102", # single if instead of nested -- only sometimes useful
#    "SIM114", # combine if branches using logical OR -- only sometimes useful
#    "SIM115", # use context handler for open -- situationally useful
#    "SIM118", # use x in y instead of y.keys() - sometimes we want the keys 
#    "SIM300", # yoda conditions -- meh
#
#    "PERF203", # `try`-`except` within a loop incurs performance overhead
#    "PERF401", # use list comp
#    "UP038", # use `int | float` in `isinstance` *slower
#    "UP040", # use type vs TypeAlias -- not supported by mypy yet
#
#    # NOT OPTIONAL. MUST REMAIN AS SET
#    # these are all completely unnecessary 
#    "D100", # Missing docstring in public module
#    "D101", # Missing docstring in public class
#    "D102", # Missing docstring in public method
#    "D103", # Missing docstring in public function
#    "D104", # Missing docstring in public package
#    "D105", # Missing docstring in magic method
#    "D106", # Missing docstring in public nested class
#    "D107", # Missing docstring in `__init__`
#    "D200", # One-line docstring should fit on one line
#    "D202", # no blank lines after docstring
#    "D203", # one-blank-line-before-class
#    "D204", # blank line required after docstring
#    "D205", # blank line between summary and description
#    "D210", # whitespace
#    "D212", # Multi-line summary should start at the first line
#    "D214", # Section overindented
#    "D301", # Use `r"""` if any backslashes in a docstring
#    "D400", # First line should end with a period
#    "D401", # imperative mood
#    "D403", # first word of 1st line caps
#    "D404", # First word of the docstring should not be "This"
#    "D405", # Section name should be properly capitalized
#    "D406", # Section name should end with a newline 
#    "D407", # Missing dashed underline after section
#    "D411", # Missing blank line before section
#    "D412", # No blank lines allowed between a section header and its content
#    "D413", # Missing blank line after last section
#    "D415", # First line should end with punctuation
#    "A003", # Class attribute shadow builtin
#    "PLC0414", # useless-import-alias
#    "PLR0911", # too-many-return-statements
#    "PLR0912", # too-many-branches
#    "PLR0913", # too-many-arguments
#    "PLR0915", # too-many-statements
#    "PLR2004", # magic-value-comparison
#]


[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D",  # we don't need public-API-polished docstrings in tests.
    "FBT",  # using a boolean as a test object is useful!
    "PLR",  # likewise using specific numbers and strings in tests.
]


################################################################################
#                 END OF BOILERPLATE CONFIGURATIONS                 #
################################################################################




[tool.poetry]
name = "clockify_client"
version = "0.1.1"
description = "Python API client for clockify. Inspired by https://github.com/eluvia-com/clockify-api-aclient."
authors = ["Marcel Wilson <m.wilson@acustaf.com>", "Alexis Rhote <a.rhote@acustaf.com>"]
maintainers = ["Marcel Wilson", "Alexis Rhote"]
license = "MIT"
repository = "https://github.com/PyClockifyClient/clockify_client"
#documentation = ""
readme = "README.md"
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
]

# It's possible to add optional dependencies with the poetry CLI tool using:
#   poetry add --optional some_dev_pkg
# This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
# But then you need to remember to manually edit the [tool.poetry.extras] dev section
# and declare the package. This allows `pip install .[dev]` to work as expected
# Poetry users will need to use the `--extras dev` option rather than the `--with dev`
# so we dont have two different sets of package versions to update.

[tool.poetry.dependencies]
python = "^3.10"
requests = "*"
importlib_metadata = {version = "*", python = "3.10.*"}
typing_extensions = ">=4.8.0"

# convenience packages for development
black = {version = "*", optional = true}
coverage = {version = "*", optional = true}
mypy = {version = "*", optional = true}
pytest = {version = "*", optional = true}
pytest-mock = {version = "*", optional = true}
responses = {version = "*", optional = true}
ruff = {version = ">=0.5.0", optional = true}
tox = {version = "*", optional = true}
twine = {version = "*", optional = true}
types-requests = {version = "*", optional = true}

[tool.poetry.extras]
dev = [
    "black",
    "coverage",
    "mypy",
    "pytest",
    "pytest-mock",
    "responses",
    "ruff",
    "twine",
    "types-requests",
    "tox",
]
test = [
    "coverage",
    "pytest",
    "pytest-mock",
    "responses",
    "tox",
]


[tool.coverage.run]
source = ["clockify_client"]


[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
    "pass",
]
